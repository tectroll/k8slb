apiVersion: v1
kind: Namespace
metadata:
  name: k8slb-system
  labels:
    app: k8slb

---
# Example configuration, update with your own information
# Note, the configs are in JSON format, not YAML
####
apiVersion: v1
kind: ConfigMap
metadata:
  namespace: k8slb-system
  name: global
data:
  config: |
    {
      "pools": {
          "default": {
            "network": "192.168.10.0/24",
            "range": "192.168.10.240-192.168.10.249"
          }
      },
      "keepalived": {
        "email": "",
        "emailFrom": "",
        "emailServer": "",
        "emailServerTimeout": "30"
      },
      "nginx": {
        "global": [
          "worker_processes 4;",
          "events {",
          "  multi_accept on;",
          "  worker_connections 16384;",
          "  use epoll;",
          "}"
        ],
        "http": [
          "real_ip_header                  X-Forwarded-For;",
          "real_ip_recursive               on;",
          "set_real_ip_from                0.0.0.0/0;",
          "aio                             threads;",
          "aio_write                       on;",
          "tcp_nopush                      on;",
          "tcp_nodelay                     on;",
          "log_subrequest                  on;",
          "reset_timedout_connection       on;",
          "keepalive_timeout               75s;",
          "keepalive_requests              100;",
          "client_header_buffer_size       1k;",
          "client_header_timeout           60s;",
          "large_client_header_buffers     4 8k;",
          "client_body_buffer_size         8k;",
          "client_body_timeout             60s;",
          "http2_max_field_size            4k;",
          "http2_max_header_size           16k;",
          "types_hash_max_size             2048;",
          "server_names_hash_max_size      1024;",
          "server_names_hash_bucket_size   64;",
          "map_hash_bucket_size            64;",
          "proxy_headers_hash_max_size     512;",
          "proxy_headers_hash_bucket_size  64;",
          "variables_hash_bucket_size      128;",
          "variables_hash_max_size         2048;",
          "underscores_in_headers          off;",
          "ignore_invalid_headers          on;",
          "limit_req_status                503;",
          "include /etc/nginx/mime.types;",
          "default_type text/html;",
          "gzip on;",
          "gzip_comp_level 5;",
          "gzip_http_version 1.1;",
          "gzip_min_length 256;",
          "gzip_types application/atom+xml application/javascript application/x-javascript application/json application/rss+xml application/vnd.ms-fontobject application/x-font-ttf application/x-web-app-manifest+json application/xhtml+xml application/xml font/opentype image/svg+xml image/x-icon text/css text/plain text/x-component;",
          "gzip_proxied any;",
          "gzip_vary on;",
          "server_tokens on;",
          "uninitialized_variable_warn off;",
          "log_format upstreaminfo '$the_real_ip - $remote_user [$time_local] \"$request\" $status $body_bytes_sent \"$http_referer\" \"$http_user_agent\" $request_length $request_time $upstream_addr $upstream_response_length $upstream_response_time $upstream_status $req_id';",
          "map $request_uri $loggable {",
          "  default 1;",
          "}",
          "access_log /var/log/nginx/access.log upstreaminfo if=$loggable;",
          "error_log  /var/log/nginx/error.log notice;",
          "map $http_upgrade $connection_upgrade {",
          "  default          upgrade;",
          "  ''               close;",
          "}",
          "map $http_x_forwarded_for $the_real_ip {",
          "  default          $remote_addr;",
          "}",
          "map $http_x_forwarded_proto $pass_access_scheme {",
          "  default          $http_x_forwarded_proto;",
          "  ''               $scheme;",
          "}",
          "map \"$scheme:$pass_access_scheme\" $redirect_to_https {",
          "  default          0;",
          "  'http:http'      1;",
          "  'https:http'     1;",
          "}",
          "map $http_x_forwarded_port $pass_server_port {",
          "  default           $http_x_forwarded_port;",
          "  ''                $server_port;",
          "}",
          "map $pass_server_port $pass_port {",
          "  443              443;",
          "  default          $pass_server_port;",
          "}",
          "map $http_host $this_host {",
          "  default          $http_host;",
          "  ''               $host;",
          "}",
          "map $http_x_forwarded_host $best_http_host {",
          "  default          $http_x_forwarded_host;",
          "  ''               $this_host;",
          "}",
          "map $http_x_request_id $req_id {",
          "  default   $http_x_request_id;",
          "  ''        $request_id;",
          "}",
          "server_name_in_redirect off;",
          "port_in_redirect        off;",
          "ssl_protocols TLSv1.2;",
          "ssl_session_cache builtin:1000 shared:SSL:10m;",
          "ssl_session_timeout 10m;",
          "ssl_session_tickets on;",
          "ssl_buffer_size 4k;",
          "ssl_ciphers 'ECDHE-ECDSA-AES256-GCM-SHA384:ECDHE-RSA-AES256-GCM-SHA384:ECDHE-ECDSA-CHACHA20-POLY1305:ECDHE-RSA-CHACHA20-POLY1305:ECDHE-ECDSA-AES128-GCM-SHA256:ECDHE-RSA-AES128-GCM-SHA256:ECDHE-ECDSA-AES256-SHA384:ECDHE-RSA-AES256-SHA384:ECDHE-ECDSA-AES128-SHA256:ECDHE-RSA-AES128-SHA256';",
          "ssl_prefer_server_ciphers on;",
          "ssl_ecdh_curve auto;",
          "proxy_ssl_session_reuse on;"
        ],
        "proxy": [
          "port_in_redirect off;",
          "client_max_body_size                    1m;",
          "proxy_set_header Host                   $best_http_host;",
          "proxy_set_header                        Upgrade           $http_upgrade;",
          "proxy_set_header                        Connection        $connection_upgrade;",
          "proxy_set_header X-Request-ID           $req_id;",
          "proxy_set_header X-Real-IP              $the_real_ip;",
          "proxy_set_header X-Forwarded-For        $the_real_ip;",
          "proxy_set_header X-Forwarded-Host       $best_http_host;",
          "proxy_set_header X-Forwarded-Port       $pass_port;",
          "proxy_set_header X-Forwarded-Proto      $pass_access_scheme;",
          "proxy_set_header X-Original-URI         $request_uri;",
          "proxy_set_header X-Scheme               $pass_access_scheme;",
          "proxy_set_header X-Original-Forwarded-For $http_x_forwarded_for;",
          "proxy_set_header Proxy                  '';",
          "proxy_connect_timeout                   30s;",
          "proxy_send_timeout                      1800s;",
          "proxy_read_timeout                      1800s;",
          "proxy_buffering                         off;",
          "proxy_buffer_size                       4k;",
          "proxy_buffers                           4 4k;",
          "proxy_request_buffering                 on;",
          "proxy_http_version                      1.1;",
          "proxy_cookie_domain                     off;",
          "proxy_cookie_path                       off;",
          "proxy_next_upstream                     error timeout;",
          "proxy_next_upstream_tries               3;",
          "proxy_redirect                          off;"
        ]
      }
    }
---
# This configures the kubernetes service accounts for
# use with RBAC.
####
apiVersion: v1
kind: ServiceAccount
metadata:
  namespace: k8slb-system
  name: watcher
  labels:
    app: k8slb

---
apiVersion: v1
kind: ServiceAccount
metadata:
  namespace: k8slb-system
  name: actor
  labels:
    app: k8slb

---
apiVersion: rbac.authorization.k8s.io/v1
kind: ClusterRole
metadata:
  name: k8slb-system:watcher
  labels:
    app: k8slb
rules:
- apiGroups: [""]
  resources: ["services", "endpoints"]
  verbs: ["get", "list", "watch", "update", "patch"]
- apiGroups: [""]
  resources: ["nodes", "pods"]
  verbs: ["get", "list", "watch"]
- apiGroups: [""]
  resources: ["services/status", "events"]
  verbs: ["update", "patch", "create"]

---
apiVersion: rbac.authorization.k8s.io/v1
kind: Role
metadata:
  namespace: k8slb-system
  name: config-watch
  labels:
    app: k8slb
rules:
- apiGroups: [""]
  resources: ["configmaps"]
  verbs: ["get", "list", "watch", "update", "create"]

---
apiVersion: rbac.authorization.k8s.io/v1
kind: ClusterRoleBinding
metadata:
  name: k8slb-system:watcher
  labels:
    app: k8slb
subjects:
- kind: ServiceAccount
  name: watcher
  namespace: k8slb-system
roleRef:
  apiGroup: rbac.authorization.k8s.io
  kind: ClusterRole
  name: k8slb-system:watcher

---
apiVersion: rbac.authorization.k8s.io/v1
kind: ClusterRoleBinding
metadata:
  name: k8slb-system:actor
  labels:
    app: k8slb
subjects:
- kind: ServiceAccount
  name: actor
  namespace: k8slb-system
roleRef:
  apiGroup: rbac.authorization.k8s.io
  kind: ClusterRole
  name: k8slb-system:actor

---
apiVersion: rbac.authorization.k8s.io/v1
kind: RoleBinding
metadata:
  namespace: k8slb-system
  name: config-watch
  labels:
    app: k8slb
subjects:
- kind: ServiceAccount
  name: watcher
- kind: ServiceAccount
  name: actor
roleRef:
  apiGroup: rbac.authorization.k8s.io
  kind: Role
  name: config-watch


---
# Configures the watcher deployment.  A single instance of this
# runs.  It watches kubernetes for changes in configuration and
# updates the database needed by the actor.
####
apiVersion: apps/v1beta2
kind: Deployment
metadata:
  labels:
    app: k8slb
    component: watcher
  name: watcher
  namespace: k8slb-system
spec:
  selector:
    matchLabels:
      app: k8slb
      component: watcher
  replicas: 1
  template:
    metadata:
      labels:
        app: k8slb
        component: watcher
    spec:
      containers:
      - image: tectroll/k8slb-watcher:v0.5
        name: watcher
        env:
        - name: K8SLB_NODE_NAME
          valueFrom:
            fieldRef:
              fieldPath: spec.nodeName
        - name: PROXY
          value: "nginx"
        - name: LOG_LEVEL
          value: "3"
        securityContext:
          allowPrivilegeEscalation: false
          capabilities: {}
          privileged: false
          readOnlyRootFilesystem: false
          runAsNonRoot: false
        stdin: true
      restartPolicy: Always
      serviceAccount: watcher
      serviceAccountName: watcher
      terminationGracePeriodSeconds: 0

---
# Actor manifest, actor runs on each load balancer.
# It watches for changes in the database, configures
# the IPs, and listens for external connections.
####
apiVersion: apps/v1beta2
kind: DaemonSet
metadata:
  labels:
    app: k8slb
    component: actor
  name: actor
  namespace: k8slb-system
spec:
  selector:
    matchLabels:
      app: k8slb
      component: actor
  template:
    metadata:
      labels:
        app: k8slb
        component: actor
    spec:
      hostNetwork: true
      containers:
      - image: tectroll/k8slb-actor:v0.5
        imagePullPolicy: Always
        name: watcher
        env:
        - name: K8SLB_NODE_NAME
          valueFrom:
            fieldRef:
              fieldPath: spec.nodeName
        - name: PROXY
          value: "nginx"
        - name: LOG_LEVEL
          value: "3"
        volumeMounts:
        - name: certs
          mountPath: /etc/certs
          readOnly: true
        - name: dev
          mountPath: /dev
        stdin: true
        securityContext:
          privileged: true
      volumes:
      - name: certs
        hostPath:
          path: /etc/certs
      - name: dev
        hostPath:
          path: /dev
      restartPolicy: Always
      serviceAccount: actor
      serviceAccountName: actor
      terminationGracePeriodSeconds: 0
      nodeSelector:
        "type": "loadBalancer"



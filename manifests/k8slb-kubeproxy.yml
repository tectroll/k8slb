apiVersion: v1
kind: Namespace
metadata:
  name: k8slb-system
  labels:
    app: k8slb

---
# Example configuration, update with your own information
# Note, the configs are in JSON format, not YAML
####
apiVersion: v1
kind: ConfigMap
metadata:
  namespace: k8slb-system
  name: global
data:
  config: |
    {
      "pools": {
          "default": {
            "network": "192.168.10.0/24",
            "range": "192.168.10.240-192.168.10.249"
          }
      },
      "keepalived": {
        "email": "",
        "emailFrom": "",
        "emailServer": "",
        "emailServerTimeout": "30"
      }
    }
---
# This configures the kubernetes service accounts for
# use with RBAC.
####
apiVersion: v1
kind: ServiceAccount
metadata:
  namespace: k8slb-system
  name: watcher
  labels:
    app: k8slb

---
apiVersion: v1
kind: ServiceAccount
metadata:
  namespace: k8slb-system
  name: actor
  labels:
    app: k8slb

---
apiVersion: rbac.authorization.k8s.io/v1
kind: ClusterRole
metadata:
  name: k8slb-system:watcher
  labels:
    app: k8slb
rules:
- apiGroups: [""]
  resources: ["services", "endpoints"]
  verbs: ["get", "list", "watch", "update", "patch"]
- apiGroups: [""]
  resources: ["nodes", "pods"]
  verbs: ["get", "list", "watch"]
- apiGroups: [""]
  resources: ["services/status", "events"]
  verbs: ["update", "patch", "create"]

---
apiVersion: rbac.authorization.k8s.io/v1
kind: Role
metadata:
  namespace: k8slb-system
  name: config-watch
  labels:
    app: k8slb
rules:
- apiGroups: [""]
  resources: ["configmaps"]
  verbs: ["get", "list", "watch", "update", "create"]

---
apiVersion: rbac.authorization.k8s.io/v1
kind: ClusterRoleBinding
metadata:
  name: k8slb-system:watcher
  labels:
    app: k8slb
subjects:
- kind: ServiceAccount
  name: watcher
  namespace: k8slb-system
roleRef:
  apiGroup: rbac.authorization.k8s.io
  kind: ClusterRole
  name: k8slb-system:watcher

---
apiVersion: rbac.authorization.k8s.io/v1
kind: ClusterRoleBinding
metadata:
  name: k8slb-system:actor
  labels:
    app: k8slb
subjects:
- kind: ServiceAccount
  name: actor
  namespace: k8slb-system
roleRef:
  apiGroup: rbac.authorization.k8s.io
  kind: ClusterRole
  name: k8slb-system:actor

---
apiVersion: rbac.authorization.k8s.io/v1
kind: RoleBinding
metadata:
  namespace: k8slb-system
  name: config-watch
  labels:
    app: k8slb
subjects:
- kind: ServiceAccount
  name: watcher
- kind: ServiceAccount
  name: actor
roleRef:
  apiGroup: rbac.authorization.k8s.io
  kind: Role
  name: config-watch


---
# Configures the watcher deployment.  A single instance of this
# runs.  It watches kubernetes for changes in configuration and
# updates the database needed by the actor.
####
apiVersion: apps/v1beta2
kind: Deployment
metadata:
  labels:
    app: k8slb
    component: watcher
  name: watcher
  namespace: k8slb-system
spec:
  selector:
    matchLabels:
      app: k8slb
      component: watcher
  replicas: 1
  template:
    metadata:
      labels:
        app: k8slb
        component: watcher
    spec:
      containers:
      - image: tectroll/k8slb-watcher:v0.5
        name: watcher
        env:
        - name: K8SLB_NODE_NAME
          valueFrom:
            fieldRef:
              fieldPath: spec.nodeName
        - name: PROXY
	  value: "kubeproxy"
        - name: LOG_LEVEL
          value: "3"
        securityContext:
          allowPrivilegeEscalation: false
          capabilities: {}
          privileged: false
          readOnlyRootFilesystem: false
          runAsNonRoot: false
        stdin: true
      restartPolicy: Always
      serviceAccount: watcher
      serviceAccountName: watcher
      terminationGracePeriodSeconds: 0

---
# Actor manifest, actor runs on each load balancer.
# It watches for changes in the database, configures
# the IPs, and listens for external connections.
####
apiVersion: apps/v1beta2
kind: DaemonSet
metadata:
  labels:
    app: k8slb
    component: actor
  name: actor
  namespace: k8slb-system
spec:
  selector:
    matchLabels:
      app: k8slb
      component: actor
  template:
    metadata:
      labels:
        app: k8slb
        component: actor
    spec:
      hostNetwork: true
      containers:
      - image: tectroll/k8slb-actor:v0.5
        imagePullPolicy: Always
        name: actor
        env:
        - name: K8SLB_NODE_NAME
          valueFrom:
            fieldRef:
              fieldPath: spec.nodeName
        - name: PROXY
          value: "kubeproxy"
        - name: LOG_LEVEL
          value: "3"
        volumeMounts:
        - name: certs
          mountPath: /etc/certs
          readOnly: true
        - name: dev
          mountPath: /dev
        stdin: true
        securityContext:
          privileged: true
      volumes:
      - name: certs
        hostPath:
          path: /etc/certs
      - name: dev
        hostPath:
          path: /dev
      restartPolicy: Always
      serviceAccount: actor
      serviceAccountName: actor
      terminationGracePeriodSeconds: 0
      nodeSelector:
        "type": "loadBalancer"


